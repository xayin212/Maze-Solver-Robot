Set global variables / declare functions


main:
	Initializations
	Enforce 1 second start up delay
	Set desired distance and distance deemed to be “far away”
	Start the timer counters
	Set motors to forwards
	Turn off all RGB LEDs
	Turn on the motors

	infinite while loop:
		if 100 ms has passed:
			-- Start taking in inputs from environment ---
			Detect whether or not bumpers are being pressed
			If the bumpers have been hit: (wall in front)
				if it hasn't already been hit:
					set distance read from encoders to 0
				set rightflag.0 to true
			read in ranger value from sensor
			if this is the first loop:
				set ranger value to arbitrary "close" number (may 				read in a previous run's last value)
			if the ranger reads in a deemed far value: (no wall on 			left)
				if the rightflag.0 hasn't been triggered:
					if the leftflag.0 hasn't already been 						triggered:
						set the distance of both encoders to 0
					set leftflag.0 to true
					turn on red led
			else:
				calculate a differential speed based off of the 					desired distance from the wall and current distance
			calculate the distance that has been traveled
			--- End taking in inputs from environment ---
			--- START TURNING CASES --- 
			if the rightflag.0 has been triggered:
				if rightflag.1 isn't true: (Set motors to reverse)
					set both motors to drive backwards
					reset distance of both encoders to 0
					set rightflag.1 to true
				else if rightflag.2 isn't true: (reverse for 					distance)
					if the initial distance to avoid hitting the 					wall has been done:
						reset distance of both encoders to 0
						Set left motor to forwards
						set rightflag.2 to true
					else:
						set desired speed
						set differential speed to 0;
				else if rightflag.3 isn't true: (Turn right 90 					degrees)
					if the distance required to make a 90 degree 					angle has been read:
						set distance to 0
						set both motors to forwards
						set rightflag.3 to true:
					else:
						set desired speed
						set differential speed to 0;
				else if rightflag.3 is true:
					set rightflag.0, .1, .2, .3 to false
					set leftflag.0, .1, .2, .3 to false
			if the leftflag.0 has been triggered:
				if the leftflag.1 isn't true: (No wall detected to 					the left, drive forwards)
					if ranger reads less than deemed "far":
						set rightflag.0, .1, .2, .3 to false
						set leftflag.0, .1, .2, .3 to false
						turn off red light
					else if distance to clear the wall has been 					accomplished:
						set leftflag.1 to true
						reset distance of both encoders to 0
						set left motor to backwards
						turn off red light
					else:
						set desired speed
						set differential speed to 0;
				else if leftflag.2 isn't true: (Turn 90 degrees to 				the left)
					if the distance required to make a 90 degree 					angle has been read:
						set distance to 0
						set both motors to forwards
						set leftflag.2 to true:
					else:
						set desired speed
						set differential speed to 0;
				else if leftflag.3 isn't true: (drive to start 					detecting the wall again)
					if the ranger reads a value that is deemed not 					"far" or the car has traveled a distance for 					it to clear the wall and start reading the 					wall again:
						set left flag to true
					else:
						set desired speed
						set differential speed to 0
				else if leftflag.3 is true:
					set rightflag.0, .1, .2, .3 to false
					set leftflag.0, .1, .2, .3 to false
			--- END TURNING CASES ---
			--- Start Wheel Speed Control ---
			For each wheel: 
				calculate desired wheel speed as desired speed +/- 				differential speed
				if desired wheel speed is less than a minimum:
					set desired wheel speed to 0
				else:
					add "error sum" variable using integral 						control using desired speed and measured speed
				calculate compare value based on error sum and 					desired speed
				set a maximum and minimum value for compare value
			apply compare value to each wheel
			--- End Wheel Speed Control ---

Other functions:

GPIO Initialization:
	set as Output Pin:
		Motor direction pins
		motor on/off pins
		RGB LEDs
	set as Peripheral Output Pin:
		Motor PWM pins with primary module function
		I2C communication routing (SCL and SDA) with secondary module function
	set as Peripheral Input Pins:
		Motor Encoder with primary module function

	set as pull up resistor:
		All bumper pins

	set Output Low:
		Motor on/off pins
	set motor direction to forwards

Timer Initialization:
	Configure PWM timer in up mode with 30 kHz frequency using Timer Base 	A0
	Configure TA0.CCR3 for PWM output 
	Configure TA0.CCR4 for PWM output
	Configure Encoder timer in continuous mode with 24 MHz frequency using 	Timer Base A3
	Configure TA3.CCR0 for Encoder measurement
	Configure TA3.CCR1 for Encoder measurement
	Register Encoder Interrupt
	Configure 10 Hz timer for 100ms timer
	Start timer in up mode and continuous mode


I2C Initialization:
	Configure I2C clock
	Initialize Controller 
	Enable Module

ReadRanger function:
	Read In Data from Ranger
	Convert data into distance from wall
	Tell ranger to read in another measurement
	return distance from wall

getInput Function:
	set all bumpers to get input value of corresponding pins


Encoder ISR function:
	if Interrupt was from Overflow:
		reset interrupt flag
		add 2^16 to both right and left encoder timer count
	else if Interrupt was from left encoder:
		reset interrupt flag
		add left encoder count
		Calculate encoder left timing with previous capture count and 		current encoder timer count
		save a negative current capture count to previous capture count
		calculate an average speed over 6 encoder counts
	else if Interrupt was from right encoder:
		reset interrupt flag
		add right encoder count
		Calculate encoder right timing with previous capture count and 		current encoder timer count
		save a negative current capture count to previous capture count
		calculate an average speed over 6 encoder counts

Timer 10 Hz ISR function:
	if flag was from 10 Hz:
		clear flag
		set 100 ms flag to true

I2C_writeData function:
	given to us in class

I2C_readData function:
	given to us in class



